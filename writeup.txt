  In regards to implementation, I decided to split the actual classes into more domain specifc names and separate responsibilites. Thus, a venue has multiple sections and is decoupled from the section validation strategy. This made unit testing simpler and easier to reason. In terms of actual validation, I used multiple methods based on what I saw in test data from test runs. The methods are also prioritized until a valid match is found.
  Had I used modules outside of the ruby library, this would have changed my implementation. There are several ruby gems with "fuzzy" matching patterns that give "scores" based on matching distance. For testing, I would have used the more expressive rspec over r-unit.
